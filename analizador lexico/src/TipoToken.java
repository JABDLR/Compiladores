public enum TipoToken {
    // Crear un tipoToken por palabra reservada
    // Crear un tipoToken: identificador, una cadena y numero
    // Crear un tipoToken por cada "Signo del lenguaje" (ver clase Scanner)

    // Palabras clave:
    Y, CLASE, ADEMAS, FALSO, PARA, FUN,  SI, NULO, O, IMPRIMIR, RETORNAR, SUPER, ESTE, VERDADERO, VAR, MIENTRAS,

    //identificador, una cadena y numero
    IDENTIFICADOR, CADENA, NUMERO,

    //Signo del lenguaje
    PARENTESIS_DERECHO, PARENTESIS_IZQUIERDO, LLAVE_DERECHA, LLAVE_IZQUIERDA, COMA, PUNTO, PUNTO_COMA, GUION_MEDIO, MAS,
    ASTERISCO, BARRA_INCLINADA, ADMIRACION, OP_DIFERENTE, IGUAL_QUE, OP_IGUAL_QUE, MENOR_QUE, OP_MENOR_IGUAL_QUE, MAYOR_QUE,
    OP_MAYOR_IGUAL_QUE,

    
    //Declaraciones
    DECLARATION, CLASS_DECL, CLASS_INHER ,  FUN_DECL, VAR_DECL, VAR_INIT,
    
    //Sentencias
    STATEMENT, EXPR_STMT, FOR_STMT,FOR_STMT_1, FOR_STMT_2, FOR_STMT_3, IF_STMT, ELSE_STATEMENT,
    PRINT_STMT, RETURN_STMT,  RETURN_EXP_OPC, WHILE_STMT, BLOCK,  BLOCK_DECL,

    //Expresiones
    EXPRESSION, ASSIGNMENT, ASSIGNMENT_OPC, LOGIC_OR, LOGIC_OR_2, LOGIC_AND, LOGIC_AND_2,
    EQUALITY, EQUALITY_2, COMPARISON, COMPARISON_2, TERM, TERM_2, FACTOR, FACTOR_2, UNARY,
    CALL, CALL_2,  CALL_OPC, PRIMARY,

    //Otras
    FUNCTION, FUNCTIONS, ARGUMENTS_OPC,  PARAMETERS_OPC, PARAMETERS, PARAMETERS_2, 
    ARGUMENTS, ARGUMENTS_2,

    // Final de cadena
    EOF
}

